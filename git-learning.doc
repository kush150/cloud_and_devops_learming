what is VCS?
VCS (Version Control System) is a software tool that helps manage changes to files and directories over time.
Evertime you make change, whter it is adding a sentence to a document or altering a line of code, 
the VCS arecords and sbe the outcome.

Why VCS ?
1. Collaboration: VCS allows multiple developers to work on the same project simultaneously
                   without overwriting each other's changes.
2. History Tracking: VCS keeps a record of all changes made to files, allowing developers to
                     revert to previous versions if needed.
3. Branching and Merging: VCS enables developers to create branches for new features or bug fixes,
                          allowing them to work independently before merging changes back into the main codebase.
4. Backup and Recovery: VCS provides a backup of the project, ensuring that changes are not lostk & cane be recoverd.

                                          version control system
                                                      |
                                                  Repository
                                                      |
  ---------------uploade (push)-----------------------|------------------------------Download(Pull)--------|            
  |              Download (Pull)----------------------|------------------------------Uploade(Push) --------|          
User1 -----------------|                                                                                  user2    
  |                                                                                                      |
  |------------------Working Directory (Untracked files)------------------|----------------Working Directory (Untracked files)------------------|
                     |                                                  |                                                 |
                     |------------------Staging Area (Tracked files)-----|-----------------Staging Area (Tracked files)------------------|
                                        |                                                  |
                                        |------------------Local Repository (Committed files)------------------|      
                                                                          |
                                                                    Remote repository (Github, Gitlab)
                                                                          |
                                                                    Other Users

      
what is git ? 
Git is a distributed version control system that allows multiple developers to work on a project 
simultaneously without interfering with each other's changes. It tracks changes to files and enables
collaboration, branching, and merging of code.

git work flow 

working directory                   staging area                local repository                remote repository
    (untracked files)               (tracked files)               (committed files)               (github, gitlab)
            |                               |                              |                               |
            |-------------------------------|------------------------------|-------------------------------|
            |
    git add <filename>
                                            |
                                     git commit -m "message"
                                                                           |
                                                                 git push origin <branchname>
                                                                                                            
GIT COMMANDS 

git --version
- To check the installed version of git

git init
 - Initializec an empty git repository

git config --global user.name <github_user_name>
- Sets the username for git configuration

git config --global user.email <email_id>
- Sets the email for git configuration

git remote add origin <link>
- Adds the remote repository link

git remote -v
- Shows the remote repository link

git config --list
- Shows the git configuration list

git status 
- Gives the information of tha current  state of the git repository

git add <filename>
 - Adds the file to the staging area & show the tracked and untracked files

git commit -m "give massage" 
- Commits the changes to the local repository

git log
- shows the commit history

git log --oneline
- shows the commit history in a single line

git show <CommitId:File_name>
- shows the changes made in the specified commit

git checkout <CommitId -- File_Name>
- Discards the changes made in the working directory and restores the file to the specified commit state (Use "*" in place of "File_Name" for all files) 

git checkout master -- *
- Discards the changes made in the working directory and restores all the files to the latest commit state of the master branch



concetp of git branches and creating feature brachnes!
Branches in Git are used to create separate lines of development within a repository.
They allow developers to work on different features branches, bug fixes, or experiments without affecting the main codebase.
This enables parallel development and makes it easier to manage changes.

git branch 
- shows the list of branches in the repository

git branch <branchname>
 - Creates a new branch 

git checkout <branchname>
- Switch to the specified branche

git branch -M <new_name>
- Renames the current branch to the new name

git branch -d <branch_name>
- Deletes the specified branch

git merge <branchname>
 - Merges the specified branch to the current branch
 Note: - while merging branches it give an error or conflict shows there is a difference between the content of 
 branches in the same line, and denied to merge automatically. For that we need to checkout the conflict, removes
 the indecators and then commit the changes. 

git diff --cached
- Shows the difference between the staging area and the last commit

git diff <branch_name>
- Shows the difference between the current branch and the specified branch to compair commits, branches, files & more.

If we made anay chnge by mistake and save it 
case1: - to undo changes, get the lastsuccessful change 
git restore <. or File_Name>
- Discards the changes made in the working directory and restores the file to the last committed state

case2: - if we added the changes using "git add" then
 git restore --staged <filename>
- Unstages the file from the staging area
git restore <file_name>
- Discards the changes made in the working directory and restores the file to the last committed state

case3: - Added change to staging area I(didn't commit) after the added more changes to file
*to get the staged changes*
git restore --worktree <File_Name>
- Restores the file in the working directory to the state in the staging area

CASE4:- HOw about if we did commit a worng files
git reset --soft <HEAD^ or HEAD_CommitId> (uncommit and keep the change)
- Unstages the last commit but keeps the changes in the staging area after that commit,(for one commit)

git reset --hard <HEAD^ Or HEAD_CommitId> (uncommit and discard the changes)
- Resets the repository to the specified commit and discards all changes made after that commit

git reset <file_name>
- Unstages the file from the staging area but keeps the changes in the working directory

git reset HEAD~1 
- Unstages the last commit but keeps the changes in the working directory,(for one commit)

git reset <commitId>
- Unstages the changes made in the specified commit but keeps the changes in the working directory

git revert <logID>
- Reverts the changes made in the last commit 

git clone <repository_link>
- Clones the remote repository to the local machine 

git push origin main 
- Pushes the changes to the remote repository

git push -u origin main
- Pushes the changes to the remote repository and sets the upstream branch (which means we don't need to origin/main only write
  "git push" )

git pull origin main
- Pulls the changes from the remote repository to the local machine

git PR (Pull Request)
- A feature in platforms like GitHub that allows developers to notify team members about changes they've pushed to a 
branch in a repository. It facilitates code review and discussion before merging changes into the main branch.

github
- A web-based platform that uses git for version control and provides additional features like issue tracking, project management,
 and collaboration tools. It allows developers to host their repositories online and collaborate with others easily.

 

